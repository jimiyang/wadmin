{"remainingRequest":"/Users/yanglina/wadmin/node_modules/_vue-loader@15.7.2@vue-loader/lib/index.js??vue-loader-options!/Users/yanglina/wadmin/src/view/module/task/job/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yanglina/wadmin/src/view/module/task/job/index.vue","mtime":1577426295847},{"path":"/Users/yanglina/wadmin/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanglina/wadmin/node_modules/_babel-loader@8.0.6@babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/yanglina/wadmin/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanglina/wadmin/node_modules/_vue-loader@15.7.2@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport {listConvertTree} from '@/libs/util'\n//import {getAllApi} from '@/api/api'\nexport default {\n  name: 'TaskJob',\n  data () {\n    return {\n      loading: false,\n      modalVisible: false,\n      modalTitle: '',\n      saving: false,\n      pageInfo: {\n        total: 0,\n        page: 1,\n        limit: 10\n      },\n      selectApis: [],\n      formItemRules: {\n        jobName: [\n          {required: true, message: '任务名称不能为空', trigger: 'blur'}\n        ],\n        jobType: [\n          {required: true, message: '任务类型不能为空', trigger: 'blur'}\n        ],\n        cron: [\n          {required: true, message: 'cron表达式不能为空', trigger: 'blur'}\n        ],\n        path: [\n          {required: true, message: '调度接口不能为空', trigger: 'blur'}\n        ],\n        alarmMail: [\n          {required: false, type: 'email', message: '邮箱格式不正确', trigger: 'blur'}\n        ],\n        startTime: [\n          {required: true, message: '开始时间不能为空'}\n        ],\n        repeatInterval: [\n          {required: true, message: '间隔时间不能为空'}\n        ],\n        repeatCount: [\n          {required: true, message: '重试次数不能为空'}\n        ],\n      },\n      formItem: {\n        newData: true,\n        jobName: '',\n        jobDescription: '',\n        jobType: 'cron',\n        cron: '',\n        startTime: '',\n        endTime: '',\n        repeatInterval: 10000,\n        repeatCountType: '0',\n        repeatCount: 0,\n        serviceId: '',\n        path: '',\n        method: '',\n        contentType: '',\n        alarmMail: ''\n      },\n      columns: [\n        {\n          type: 'selection',\n          width: 60,\n          align: 'center'\n        },\n        {\n          title: '任务名称',\n          key: 'jobName',\n          width: 200,\n        },\n        {\n          title: '调度信息',\n          width: 350,\n          slot: 'type'\n        },\n        {\n          title: '状态',\n          key: 'jobStatus',\n          slot: 'status'\n        },\n        {\n          title: '任务描述',\n          key: 'jobDescription'\n        },\n        {\n          title: '操作',\n          key: '',\n          slot: 'action',\n          fixed: 'right',\n          width: 150\n        }\n      ],\n      data: []\n    }\n  },\n  methods: {\n    handleModal (data) {\n      if (data) {\n        this.modalTitle = '编辑任务 - ' + data.jobName\n        this.formItem = Object.assign({}, this.formItem, data)\n        this.formItem.jobType = this.formItem.jobTrigger === 'org.quartz.impl.triggers.SimpleTriggerImpl' ? 'simple' : 'cron'\n        this.formItem.cron = data.cronExpression\n        this.formItem.startTime = data.startDate\n        this.formItem.endTime = data.endDate\n        this.formItem.repeatInterval = data.repeatInterval ? parseInt(data.repeatInterval) : 0\n        this.formItem.repeatCountType = data.repeatCount + ''\n        this.formItem.path = data.data.path\n        this.formItem.serviceId = data.data.serviceId\n        this.formItem.method = data.data.method\n        this.formItem.contentType = data.data.contentType\n        this.formItem.alarmMail = data.data.alarmMail\n        this.formItem.newData = false\n      } else {\n        this.modalTitle = '添加任务'\n      }\n      this.modalVisible = true\n    },\n    handleTabClick(name){\n      this.current = name\n      this.handleModal();\n    },\n    handleReset () {\n      const newData = {\n        newData: true,\n        jobName: '',\n        jobDescription: '',\n        jobType: 'cron',\n        cron: '',\n        startTime: '',\n        endTime: '',\n        repeatInterval: 10000,\n        repeatCountType: '0',\n        repeatCount: 0,\n        serviceId: '',\n        path: '',\n        method: '',\n        contentType: '',\n        alarmMail: ''\n      }\n      this.formItem = newData\n      //重置验证\n      this.$refs['form1'].resetFields()\n      this.modalVisible = false\n      this.saving = false\n    },\n    handleSubmit () {\n      this.$refs['form1'].validate((valid) => {\n        if (valid) {\n          if (this.formItem.jobType === 'simple') {\n            this.formItem.startTime = this.formItem.startTime ? this.formItem.startTime.pattern('yyyy-MM-dd HH:mm:ss') : ''\n            this.formItem.endTime = this.formItem.endTime ? this.formItem.endTime.pattern('yyyy-MM-dd HH:mm:ss') : ''\n          }\n          this.saving = true\n          if (!this.formItem.newData) {\n            updateHttpJob(this.formItem).then(res => {\n              if (res.code === 0) {\n                this.$Message.success('保存成功')\n              }\n              this.handleReset()\n              this.handleSearch()\n            }).finally(() => {\n              this.saving = false\n            })\n          } else {\n            addHttpJob(this.formItem).then(res => {\n              if (res.code === 0) {\n                this.$Message.success('保存成功')\n              }\n              this.handleReset()\n              this.handleSearch()\n            }).finally(() => {\n              this.saving = false\n            })\n          }\n        }\n      })\n    },\n    handleRemove (data) {\n      this.$Modal.confirm({\n        title: '确定删除吗？',\n        onOk: () => {\n          removeJob(data.jobName).then(res => {\n            this.handleSearch()\n            if (res.code === 0) {\n              this.pageInfo.page = 1\n              this.$Message.success('删除成功')\n            }\n          })\n        }\n      })\n    },\n    handlePause (data) {\n      this.$Modal.confirm({\n        title: '确定暂停任务吗？',\n        onOk: () => {\n          pauseJob(data.jobName).then(res => {\n            this.handleSearch()\n            if (res.code === 0) {\n              this.pageInfo.page = 1\n              this.$Message.success('暂停成功')\n            }\n          })\n        }\n      })\n    },\n    handleResume (data) {\n      this.$Modal.confirm({\n        title: '确定恢复任务吗？',\n        onOk: () => {\n          resumeJob(data.jobName).then(res => {\n            this.handleSearch()\n            if (res.code === 0) {\n              this.pageInfo.page = 1\n              this.$Message.success('恢复成功')\n            }\n          })\n        }\n      })\n    },\n    handleSearch (page) {\n      if (page) {\n        this.pageInfo.page = page\n      }\n      this.loading = true\n      getJobs(this.pageInfo).then(res => {\n        this.data = res.data.records\n        this.pageInfo.total = parseInt(res.data.total)\n      }).finally(() => {\n        this.loading = false\n      })\n    },\n    handleLoadApiList() {\n      this.loading = true\n      \n    },\n    handlePage (current) {\n      this.pageInfo.page = current\n      this.handleSearch()\n    },\n    handlePageSize (size) {\n      this.pageInfo.limit = size\n      this.handleSearch()\n    },\n    handleOnSelectChange(value){\n      let api = {}\n      this.selectApis.some(item => {\n        if (item.path === value) {\n          api = item\n          return true\n        }\n      })\n      this.formItem.serviceId = api.serviceId\n      this.formItem.path = api.path\n      this.formItem.contentType = api.contentType\n      this.formItem.method = api.requestMethod\n    },\n    handleClick(name, row) {\n      switch (name) {\n        case 'pause':\n          this.handlePause(row)\n          break\n        case 'resume':\n          this.handleResume(row)\n          break\n        case 'remove':\n          this.handleRemove(row)\n          break\n      }\n    },\n    repeatCountTypeChange(value){\n      this.formItem.repeatCount = parseInt(value)\n    }\n  },\n  mounted: function () {\n    this.handleSearch()\n    this.handleLoadApiList()\n  }\n}\n",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/view/module/task/job","sourcesContent":["<template>\n  <div>\n    <Card shadow>\n      <div class=\"search-con search-con-top\">\n        <ButtonGroup>\n          <Button :disabled=\"hasAuthority('jobEdit')?false:true\" class=\"search-btn\" type=\"primary\"\n                  @click=\"handleModal()\">\n            <span>添加</span>\n          </Button>\n        </ButtonGroup>\n      </div>\n      <Table border :columns=\"columns\" :data=\"data\" :loading=\"loading\">\n        <template slot=\"status\" slot-scope=\"{ row }\">\n          <Badge v-if=\"row.jobStatus==='NORMAL'\" status=\"success\" text=\"正常\"/>\n          <Badge v-else=\"\" status=\"error\" text=\"暂停\"/>\n        </template>\n        <template slot=\"type\" slot-scope=\"{ row }\">\n          <p v-if=\"row.cronExpression\">cron表达式:{{row.cronExpression}}</p>\n          <p v-else=\"\">调度时间:{{row.startDate}} ~ {{row.endDate}}</p>\n        </template>\n        <template slot=\"action\" slot-scope=\"{ row }\">\n          <a :disabled=\"hasAuthority('jobEdit')?false:true\" @click=\"handleModal(row)\">编辑</a>&nbsp;\n          <Dropdown v-show=\"hasAuthority('jobEdit')\" transfer ref=\"dropdown\" @on-click=\"handleClick($event,row)\">\n            <a href=\"javascript:void(0)\">\n              <span>更多</span>\n              <Icon type=\"ios-arrow-down\"></Icon>\n            </a>\n            <DropdownMenu slot=\"list\">\n              <DropdownItem v-if=\"row.jobStatus ==='NORMAL'?true:false\" name=\"pause\">暂停任务</DropdownItem>\n              <DropdownItem v-if=\"row.jobStatus ==='PAUSED'?true:false\" name=\"resume\">恢复任务</DropdownItem>\n              <DropdownItem name=\"remove\">删除任务</DropdownItem>\n            </DropdownMenu>\n          </Dropdown>\n        </template>\n      </Table>\n      <Page transfer :total=\"pageInfo.total\" :current=\"pageInfo.page\" :page-size=\"pageInfo.limit\" show-elevator\n            show-sizer\n            show-total\n            @on-change=\"handlePage\" @on-page-size-change='handlePageSize'></Page>\n    </Card>\n    <Modal v-model=\"modalVisible\"\n           :title=\"modalTitle\"\n           width=\"40\"\n           @on-cancel=\"handleReset\">\n      <div>\n        <Form ref=\"form1\" :model=\"formItem\" :rules=\"formItemRules\" :label-width=\"100\">\n          <FormItem label=\"任务名称\" prop=\"jobName\">\n            <Input :disabled=\"formItem.newData?false:true\" v-model=\"formItem.jobName\" placeholder=\"请输入内容\" />\n          </FormItem>\n          <FormItem label=\"任务类型\" prop=\"jobType\">\n            <Select v-model=\"formItem.jobType\">\n              <Option value=\"cron\">cron任务(CronTrigger)</Option>\n              <Option value=\"simple\">简单任务(SimpleTrigger)</Option>\n            </Select>\n          </FormItem>\n          <FormItem v-if=\"formItem.jobType === 'simple'\" label=\"开始时间\" prop=\"startTime\">\n            <DatePicker v-model=\"formItem.startTime\" type=\"datetime\" placeholder=\"开始时间\"\n                        style=\"width: 100%\"></DatePicker>\n          </FormItem>\n          <FormItem v-if=\"formItem.jobType === 'simple'\" label=\"结束时间\" prop=\"endTime\">\n            <DatePicker v-model=\"formItem.endTime\" type=\"datetime\" placeholder=\"结束时间\" style=\"width: 100%\"></DatePicker>\n          </FormItem>\n          <FormItem v-if=\"formItem.jobType === 'simple'\" label=\"重复执行\" prop=\"repeatCount\">\n            <InputNumber :min=\"-1\" v-model=\"formItem.repeatCount\"></InputNumber> &nbsp;&nbsp;次\n            &nbsp;&nbsp;\n\n            <RadioGroup v-model=\"formItem.repeatCountType\" @on-change=\"repeatCountTypeChange\" type=\"button\">\n              <Radio label=\"0\">不重复执行</Radio>\n              <Radio label=\"-1\">不限制次数,一直重复执行(直到过期)</Radio>\n            </RadioGroup>\n          </FormItem>\n          <FormItem v-if=\"formItem.jobType === 'simple'\" label=\"重复执行间隔\" prop=\"repeatInterval\">\n            <InputNumber :min=\"1000\" v-model=\"formItem.repeatInterval\" />\n            <span>&nbsp;&nbsp;毫秒</span>\n          </FormItem>\n          <FormItem v-if=\"formItem.jobType === 'cron'\" label=\"cron表达式\" prop=\"cron\">\n            <Input v-model=\"formItem.cron\" placeholder=\"* * * * * ?\" />\n          </FormItem>\n          <FormItem label=\"远程调度接口\" prop=\"path\">\n            <Select filterable v-model=\"formItem.path\" @on-change=\"handleOnSelectChange\">\n              <Option v-for=\"(item, index) in selectApis\" :value=\"item.path\" :key=\"index\">\n                {{ \n                  item.path\n                }} - {{ item.apiName}} - {{ item.serviceId}}\n              </Option>\n            </Select>\n          </FormItem>\n          <FormItem label=\"任务描述\">\n            <Input v-model=\"formItem.jobDescription\" type=\"textarea\" placeholder=\"请输入内容\" />\n          </FormItem>\n          <FormItem label=\"异常告警邮箱\" prop=\"alarmMail\">\n            <Input v-model=\"formItem.alarmMail\" placeholder=\"请输入内容\" />\n          </FormItem>\n        </Form>\n        <div class=\"drawer-footer\">\n          <Button type=\"default\" @click=\"handleReset\">取消</Button>&nbsp;\n          <Button type=\"primary\" @click=\"handleSubmit\" :loading=\"saving\">保存</Button>\n        </div>\n      </div>\n    </Modal>\n  </div>\n</template>\n\n<script>\n  import {listConvertTree} from '@/libs/util'\n  //import {getAllApi} from '@/api/api'\n  export default {\n    name: 'TaskJob',\n    data () {\n      return {\n        loading: false,\n        modalVisible: false,\n        modalTitle: '',\n        saving: false,\n        pageInfo: {\n          total: 0,\n          page: 1,\n          limit: 10\n        },\n        selectApis: [],\n        formItemRules: {\n          jobName: [\n            {required: true, message: '任务名称不能为空', trigger: 'blur'}\n          ],\n          jobType: [\n            {required: true, message: '任务类型不能为空', trigger: 'blur'}\n          ],\n          cron: [\n            {required: true, message: 'cron表达式不能为空', trigger: 'blur'}\n          ],\n          path: [\n            {required: true, message: '调度接口不能为空', trigger: 'blur'}\n          ],\n          alarmMail: [\n            {required: false, type: 'email', message: '邮箱格式不正确', trigger: 'blur'}\n          ],\n          startTime: [\n            {required: true, message: '开始时间不能为空'}\n          ],\n          repeatInterval: [\n            {required: true, message: '间隔时间不能为空'}\n          ],\n          repeatCount: [\n            {required: true, message: '重试次数不能为空'}\n          ],\n        },\n        formItem: {\n          newData: true,\n          jobName: '',\n          jobDescription: '',\n          jobType: 'cron',\n          cron: '',\n          startTime: '',\n          endTime: '',\n          repeatInterval: 10000,\n          repeatCountType: '0',\n          repeatCount: 0,\n          serviceId: '',\n          path: '',\n          method: '',\n          contentType: '',\n          alarmMail: ''\n        },\n        columns: [\n          {\n            type: 'selection',\n            width: 60,\n            align: 'center'\n          },\n          {\n            title: '任务名称',\n            key: 'jobName',\n            width: 200,\n          },\n          {\n            title: '调度信息',\n            width: 350,\n            slot: 'type'\n          },\n          {\n            title: '状态',\n            key: 'jobStatus',\n            slot: 'status'\n          },\n          {\n            title: '任务描述',\n            key: 'jobDescription'\n          },\n          {\n            title: '操作',\n            key: '',\n            slot: 'action',\n            fixed: 'right',\n            width: 150\n          }\n        ],\n        data: []\n      }\n    },\n    methods: {\n      handleModal (data) {\n        if (data) {\n          this.modalTitle = '编辑任务 - ' + data.jobName\n          this.formItem = Object.assign({}, this.formItem, data)\n          this.formItem.jobType = this.formItem.jobTrigger === 'org.quartz.impl.triggers.SimpleTriggerImpl' ? 'simple' : 'cron'\n          this.formItem.cron = data.cronExpression\n          this.formItem.startTime = data.startDate\n          this.formItem.endTime = data.endDate\n          this.formItem.repeatInterval = data.repeatInterval ? parseInt(data.repeatInterval) : 0\n          this.formItem.repeatCountType = data.repeatCount + ''\n          this.formItem.path = data.data.path\n          this.formItem.serviceId = data.data.serviceId\n          this.formItem.method = data.data.method\n          this.formItem.contentType = data.data.contentType\n          this.formItem.alarmMail = data.data.alarmMail\n          this.formItem.newData = false\n        } else {\n          this.modalTitle = '添加任务'\n        }\n        this.modalVisible = true\n      },\n      handleTabClick(name){\n        this.current = name\n        this.handleModal();\n      },\n      handleReset () {\n        const newData = {\n          newData: true,\n          jobName: '',\n          jobDescription: '',\n          jobType: 'cron',\n          cron: '',\n          startTime: '',\n          endTime: '',\n          repeatInterval: 10000,\n          repeatCountType: '0',\n          repeatCount: 0,\n          serviceId: '',\n          path: '',\n          method: '',\n          contentType: '',\n          alarmMail: ''\n        }\n        this.formItem = newData\n        //重置验证\n        this.$refs['form1'].resetFields()\n        this.modalVisible = false\n        this.saving = false\n      },\n      handleSubmit () {\n        this.$refs['form1'].validate((valid) => {\n          if (valid) {\n            if (this.formItem.jobType === 'simple') {\n              this.formItem.startTime = this.formItem.startTime ? this.formItem.startTime.pattern('yyyy-MM-dd HH:mm:ss') : ''\n              this.formItem.endTime = this.formItem.endTime ? this.formItem.endTime.pattern('yyyy-MM-dd HH:mm:ss') : ''\n            }\n            this.saving = true\n            if (!this.formItem.newData) {\n              updateHttpJob(this.formItem).then(res => {\n                if (res.code === 0) {\n                  this.$Message.success('保存成功')\n                }\n                this.handleReset()\n                this.handleSearch()\n              }).finally(() => {\n                this.saving = false\n              })\n            } else {\n              addHttpJob(this.formItem).then(res => {\n                if (res.code === 0) {\n                  this.$Message.success('保存成功')\n                }\n                this.handleReset()\n                this.handleSearch()\n              }).finally(() => {\n                this.saving = false\n              })\n            }\n          }\n        })\n      },\n      handleRemove (data) {\n        this.$Modal.confirm({\n          title: '确定删除吗？',\n          onOk: () => {\n            removeJob(data.jobName).then(res => {\n              this.handleSearch()\n              if (res.code === 0) {\n                this.pageInfo.page = 1\n                this.$Message.success('删除成功')\n              }\n            })\n          }\n        })\n      },\n      handlePause (data) {\n        this.$Modal.confirm({\n          title: '确定暂停任务吗？',\n          onOk: () => {\n            pauseJob(data.jobName).then(res => {\n              this.handleSearch()\n              if (res.code === 0) {\n                this.pageInfo.page = 1\n                this.$Message.success('暂停成功')\n              }\n            })\n          }\n        })\n      },\n      handleResume (data) {\n        this.$Modal.confirm({\n          title: '确定恢复任务吗？',\n          onOk: () => {\n            resumeJob(data.jobName).then(res => {\n              this.handleSearch()\n              if (res.code === 0) {\n                this.pageInfo.page = 1\n                this.$Message.success('恢复成功')\n              }\n            })\n          }\n        })\n      },\n      handleSearch (page) {\n        if (page) {\n          this.pageInfo.page = page\n        }\n        this.loading = true\n        getJobs(this.pageInfo).then(res => {\n          this.data = res.data.records\n          this.pageInfo.total = parseInt(res.data.total)\n        }).finally(() => {\n          this.loading = false\n        })\n      },\n      handleLoadApiList() {\n        this.loading = true\n        \n      },\n      handlePage (current) {\n        this.pageInfo.page = current\n        this.handleSearch()\n      },\n      handlePageSize (size) {\n        this.pageInfo.limit = size\n        this.handleSearch()\n      },\n      handleOnSelectChange(value){\n        let api = {}\n        this.selectApis.some(item => {\n          if (item.path === value) {\n            api = item\n            return true\n          }\n        })\n        this.formItem.serviceId = api.serviceId\n        this.formItem.path = api.path\n        this.formItem.contentType = api.contentType\n        this.formItem.method = api.requestMethod\n      },\n      handleClick(name, row) {\n        switch (name) {\n          case 'pause':\n            this.handlePause(row)\n            break\n          case 'resume':\n            this.handleResume(row)\n            break\n          case 'remove':\n            this.handleRemove(row)\n            break\n        }\n      },\n      repeatCountTypeChange(value){\n        this.formItem.repeatCount = parseInt(value)\n      }\n    },\n    mounted: function () {\n      this.handleSearch()\n      this.handleLoadApiList()\n    }\n  }\n</script>\n"]}]}