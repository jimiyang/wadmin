{"remainingRequest":"/Users/yanglina/wadmin/node_modules/_vue-loader@15.7.2@vue-loader/lib/index.js??vue-loader-options!/Users/yanglina/wadmin/src/view/module/system/menus/menu-action.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yanglina/wadmin/src/view/module/system/menus/menu-action.vue","mtime":1576654785776},{"path":"/Users/yanglina/wadmin/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanglina/wadmin/node_modules/_babel-loader@8.0.6@babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/yanglina/wadmin/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanglina/wadmin/node_modules/_vue-loader@15.7.2@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/*import {\n  getActionsByMenu,\n  updateAction,\n  addAction,\n  removeAction,\n} from '@/api/action'*/\n\n\nexport default {\n  name: 'MenuAction',\n  props: {\n    value: Object\n  },\n  data () {\n    const validateEn = (rule, value, callback) => {\n      let reg = /^[_a-zA-Z0-9]+$/\n      if (value === '') {\n        callback(new Error('功能标识不能为空'))\n      } else if (value !== '' && !reg.test(value)) {\n        callback(new Error('只允许字母、数字、下划线'))\n      } else {\n        callback()\n      }\n    }\n    return {\n      modalVisible: false,\n      saving: false,\n      loading: false,\n      current: 'form1',\n      forms: [\n        'form1',\n        'form2'\n      ],\n      modalTitle: '',\n      confirmModal: false,\n      selectApis: [],\n      formItemRules: {\n        actionCode: [\n          {required: true, validator: validateEn, message: '功能编码不能为空', trigger: 'blur'}\n        ],\n        actionName: [\n          {required: true, message: '功能名称不能为空', trigger: 'blur'}\n        ]\n      },\n      formItem: {\n        actionId: '',\n        actionCode: '',\n        actionName: '',\n        authorityIds: [],\n        status: 1,\n        menuId: '',\n        priority: 0,\n        actionDesc: ''\n      },\n      columns: [\n        {\n          title: '功能名称',\n          slot: 'status',\n          width: 150\n        },\n        {\n          title: '功能编码',\n          key: 'actionCode'\n        },\n        {\n          title: '操作',\n          slot: 'action',\n          fixed: 'right',\n          width: 160\n        }\n      ],\n      data: []\n    }\n  },\n  methods: {\n    handleModal (data, step) {\n      if (data) {\n        this.formItem = Object.assign({}, this.formItem, data)\n      }\n      if (!step) {\n        step = this.forms[0]\n      }\n      if (step === this.forms[0]) {\n        this.modalTitle = data ? '编辑功能 - ' + this.value.menuName + ' > ' + data.actionName : '添加功能 - ' + this.value.menuName\n        this.modalVisible = true\n        this.formItem.actionCode = this.formItem.actionId ? this.formItem.actionCode : this.value.menuCode\n      }\n      if (step === this.forms[1]) {\n        this.modalTitle = data ? '接口授权 - ' + this.value.menuName + ' > ' + data.actionName : '接口授权'\n        this.handleLoadActionApi(this.formItem.actionId)\n      }\n      this.current = step\n      this.formItem.status = this.formItem.status + ''\n    },\n    handleReset () {\n      const newData = {\n        actionId: '',\n        actionCode: '',\n        actionName: '',\n        authorityIds: [],\n        status: 1,\n        priority: 0,\n        actionDesc: ''\n      }\n      this.formItem = newData\n      //重置验证\n      this.forms.map(form => {\n        this.$refs[form].resetFields()\n      })\n      this.current = this.forms[0]\n      this.modalVisible = false\n      this.saving = false\n    },\n    handleSubmit () {\n      if (this.current === this.forms[0]) {\n        this.$refs[this.current].validate((valid) => {\n          if (valid) {\n            this.saving = true\n            if (this.formItem.actionId) {\n              updateAction(this.formItem).then(res => {\n                this.handleReset()\n                this.handleSearch()\n                if (res.code === 0) {\n                  this.$Message.success('保存成功')\n                }\n              }).finally(() => {\n                this.saving = false\n              })\n            } else {\n              addAction(this.formItem).then(res => {\n                this.handleReset()\n                this.handleSearch()\n                if (res.code === 0) {\n                  this.$Message.success('保存成功')\n                }\n              }).finally(() => {\n                this.saving = false\n              })\n            }\n          }\n        })\n      }\n      if (this.current === this.forms[1]) {\n        this.$refs[this.current].validate((valid) => {\n          if (valid) {\n            this.saving = true\n            grantAuthorityAction({\n              actionId: this.formItem.actionId,\n              authorityIds: this.formItem.authorityIds\n            }).then(res => {\n              this.handleReset()\n              this.handleSearch()\n              if (res.code === 0) {\n                this.$Message.success('绑定成功')\n              }\n            }).finally(() => {\n              this.saving = false\n            })\n          }\n        })\n      }\n\n    },\n    handleSearch () {\n      if (!this.value || !this.value.menuId) {\n        return\n      }\n      this.formItem.menuId = this.value.menuId\n      this.loading = true\n      getActionsByMenu(this.formItem.menuId).then(res => {\n        this.data = res.data\n      }).finally(() => {\n        this.loading = false\n      })\n    },\n    handleRemove (data) {\n      this.$Modal.confirm({\n        title: '确定删除吗？',\n        onOk: () => {\n          removeAction(data.actionId).then(res => {\n            this.handleSearch()\n            if (res.code === 0) {\n              this.pageInfo.page = 1\n              this.$Message.success('删除成功')\n            }\n          })\n        }\n      })\n    },\n    handleLoadActionApi (actionId) {\n      if (!actionId) {\n        return\n      }\n      const that = this\n      const p1 = getAuthorityApi('')\n      const p2 = getAuthorityAction(actionId)\n      Promise.all([p1, p2]).then(function (values) {\n        let res1 = values[0]\n        let res2 = values[1]\n        if (res1.code === 0) {\n          res1.data.map(item => {\n            item.key = item.authorityId\n            item.label = `${item.prefix.replace('/**', '')}${item.path} - ${item.apiName}`\n            item.disabled = item.path === '/**'\n          })\n          that.selectApis = res1.data\n        }\n        if (res2.code === 0) {\n          const result = []\n          res2.data.map(item => {\n            if (!result.includes(item.authorityId)) {\n              result.push(item.authorityId)\n            }\n          })\n          that.formItem.authorityIds = result\n        }\n        that.modalVisible = true\n      })\n    },\n    transferRender (item) {\n      return `<span  title=\"${item.label}\">${item.label}</span>`\n    },\n    handleTransferChange (newTargetKeys, direction, moveKeys) {\n      if (newTargetKeys.indexOf('1') != -1) {\n        this.formItem.authorityIds = ['1']\n      } else {\n        this.formItem.authorityIds = newTargetKeys\n      }\n    },\n  },\n  watch: {\n    value (val) {\n      this.handleSearch()\n    }\n  },\n  mounted: function () {\n  }\n}\n",{"version":3,"sources":["menu-action.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2EA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"menu-action.vue","sourceRoot":"src/view/module/system/menus","sourcesContent":["<template>\n  <div>\n    <div class=\"search-con search-con-top\">\n      <ButtonGroup>\n        <Button\n          class=\"search-btn\" type=\"primary\" @click=\"handleModal()\">\n          <span>添加功能按钮</span>\n        </Button>\n      </ButtonGroup>\n    </div>\n    <Alert type=\"info\" show-icon>请绑定相关接口资源。否则请求网关服务器将提示<code>\"权限不足,拒绝访问!\"</code></Alert>\n    <Table border :columns=\"columns\" :data=\"data\" :loading=\"loading\">\n      <template slot=\"status\" slot-scope=\"{ row }\">\n        <Badge v-if=\"row.status===1\" status=\"success\"/>\n        <Badge v-else=\"\" status=\"error\"/>\n        <span>{{row.actionName}}</span>\n      </template>\n      <template slot=\"action\" slot-scope=\"{ row }\">\n        <a :disabled=\"hasAuthority('systemMenuEdit')?false:true\" @click=\"handleModal(row)\">编辑</a> &nbsp;\n        <a :disabled=\"hasAuthority('systemMenuEdit')?false:true\" @click=\"handleModal(row,forms[1])\">接口权限</a> &nbsp;\n        <a :disabled=\"hasAuthority('systemMenuEdit')?false:true\" @click=\"handleRemove(row)\">删除</a>\n      </template>\n    </Table>\n    <Modal v-model=\"modalVisible\"\n           :title=\"modalTitle\"\n           width=\"40\"\n           @on-cancel=\"handleReset\">\n      <div>\n        <Form ref=\"form1\" v-show=\"current=='form1'\" :model=\"formItem\" :rules=\"formItemRules\" :label-width=\"100\">\n          <FormItem label=\"上级菜单\">\n            <Input disabled v-model=\"value.menuName\"></Input>\n          </FormItem>\n          <FormItem label=\"功能标识\" prop=\"actionCode\">\n            <Input v-model=\"formItem.actionCode\" placeholder=\"请输入内容\"></Input>\n            <span>菜单标识+自定义标识.默认后缀：View、Edit</span>\n          </FormItem>\n          <FormItem label=\"功能名称\" prop=\"actionName\">\n            <Input v-model=\"formItem.actionName\" placeholder=\"请输入内容\"></Input>\n          </FormItem>\n          <FormItem label=\"优先级\">\n            <InputNumber v-model=\"formItem.priority\"></InputNumber>\n          </FormItem>\n          <FormItem label=\"状态\">\n            <RadioGroup v-model=\"formItem.status\" type=\"button\">\n              <Radio label=\"0\">禁用</Radio>\n              <Radio label=\"1\">启用</Radio>\n            </RadioGroup>\n          </FormItem>\n          <FormItem label=\"描述\">\n            <Input v-model=\"formItem.actionDesc\" type=\"textarea\" placeholder=\"请输入内容\"></Input>\n          </FormItem>\n        </Form>\n        <Form ref=\"form2\" v-show=\"current=='form2'\" :model=\"formItem\" :rules=\"formItemRules\">\n          <FormItem prop=\"authorities\">\n            <Transfer\n              :data=\"selectApis\"\n              :list-style=\"{width: '45%',height: '480px'}\"\n              :titles=\"['选择接口', '已选择接口']\"\n              :render-format=\"transferRender\"\n              :target-keys=\"formItem.authorityIds\"\n              @on-change=\"handleTransferChange\"\n              filterable>\n            </Transfer>\n          </FormItem>\n        </Form>\n        <div class=\"drawer-footer\">\n          <Button type=\"default\" @click=\"handleReset\">取消</Button>&nbsp;\n          <Button type=\"primary\" @click=\"handleSubmit\" :loading=\"saving\">保存</Button>\n        </div>\n      </div>\n    </Modal>\n  </div>\n</template>\n\n<script>\n  /*import {\n    getActionsByMenu,\n    updateAction,\n    addAction,\n    removeAction,\n  } from '@/api/action'*/\n\n\n  export default {\n    name: 'MenuAction',\n    props: {\n      value: Object\n    },\n    data () {\n      const validateEn = (rule, value, callback) => {\n        let reg = /^[_a-zA-Z0-9]+$/\n        if (value === '') {\n          callback(new Error('功能标识不能为空'))\n        } else if (value !== '' && !reg.test(value)) {\n          callback(new Error('只允许字母、数字、下划线'))\n        } else {\n          callback()\n        }\n      }\n      return {\n        modalVisible: false,\n        saving: false,\n        loading: false,\n        current: 'form1',\n        forms: [\n          'form1',\n          'form2'\n        ],\n        modalTitle: '',\n        confirmModal: false,\n        selectApis: [],\n        formItemRules: {\n          actionCode: [\n            {required: true, validator: validateEn, message: '功能编码不能为空', trigger: 'blur'}\n          ],\n          actionName: [\n            {required: true, message: '功能名称不能为空', trigger: 'blur'}\n          ]\n        },\n        formItem: {\n          actionId: '',\n          actionCode: '',\n          actionName: '',\n          authorityIds: [],\n          status: 1,\n          menuId: '',\n          priority: 0,\n          actionDesc: ''\n        },\n        columns: [\n          {\n            title: '功能名称',\n            slot: 'status',\n            width: 150\n          },\n          {\n            title: '功能编码',\n            key: 'actionCode'\n          },\n          {\n            title: '操作',\n            slot: 'action',\n            fixed: 'right',\n            width: 160\n          }\n        ],\n        data: []\n      }\n    },\n    methods: {\n      handleModal (data, step) {\n        if (data) {\n          this.formItem = Object.assign({}, this.formItem, data)\n        }\n        if (!step) {\n          step = this.forms[0]\n        }\n        if (step === this.forms[0]) {\n          this.modalTitle = data ? '编辑功能 - ' + this.value.menuName + ' > ' + data.actionName : '添加功能 - ' + this.value.menuName\n          this.modalVisible = true\n          this.formItem.actionCode = this.formItem.actionId ? this.formItem.actionCode : this.value.menuCode\n        }\n        if (step === this.forms[1]) {\n          this.modalTitle = data ? '接口授权 - ' + this.value.menuName + ' > ' + data.actionName : '接口授权'\n          this.handleLoadActionApi(this.formItem.actionId)\n        }\n        this.current = step\n        this.formItem.status = this.formItem.status + ''\n      },\n      handleReset () {\n        const newData = {\n          actionId: '',\n          actionCode: '',\n          actionName: '',\n          authorityIds: [],\n          status: 1,\n          priority: 0,\n          actionDesc: ''\n        }\n        this.formItem = newData\n        //重置验证\n        this.forms.map(form => {\n          this.$refs[form].resetFields()\n        })\n        this.current = this.forms[0]\n        this.modalVisible = false\n        this.saving = false\n      },\n      handleSubmit () {\n        if (this.current === this.forms[0]) {\n          this.$refs[this.current].validate((valid) => {\n            if (valid) {\n              this.saving = true\n              if (this.formItem.actionId) {\n                updateAction(this.formItem).then(res => {\n                  this.handleReset()\n                  this.handleSearch()\n                  if (res.code === 0) {\n                    this.$Message.success('保存成功')\n                  }\n                }).finally(() => {\n                  this.saving = false\n                })\n              } else {\n                addAction(this.formItem).then(res => {\n                  this.handleReset()\n                  this.handleSearch()\n                  if (res.code === 0) {\n                    this.$Message.success('保存成功')\n                  }\n                }).finally(() => {\n                  this.saving = false\n                })\n              }\n            }\n          })\n        }\n        if (this.current === this.forms[1]) {\n          this.$refs[this.current].validate((valid) => {\n            if (valid) {\n              this.saving = true\n              grantAuthorityAction({\n                actionId: this.formItem.actionId,\n                authorityIds: this.formItem.authorityIds\n              }).then(res => {\n                this.handleReset()\n                this.handleSearch()\n                if (res.code === 0) {\n                  this.$Message.success('绑定成功')\n                }\n              }).finally(() => {\n                this.saving = false\n              })\n            }\n          })\n        }\n\n      },\n      handleSearch () {\n        if (!this.value || !this.value.menuId) {\n          return\n        }\n        this.formItem.menuId = this.value.menuId\n        this.loading = true\n        getActionsByMenu(this.formItem.menuId).then(res => {\n          this.data = res.data\n        }).finally(() => {\n          this.loading = false\n        })\n      },\n      handleRemove (data) {\n        this.$Modal.confirm({\n          title: '确定删除吗？',\n          onOk: () => {\n            removeAction(data.actionId).then(res => {\n              this.handleSearch()\n              if (res.code === 0) {\n                this.pageInfo.page = 1\n                this.$Message.success('删除成功')\n              }\n            })\n          }\n        })\n      },\n      handleLoadActionApi (actionId) {\n        if (!actionId) {\n          return\n        }\n        const that = this\n        const p1 = getAuthorityApi('')\n        const p2 = getAuthorityAction(actionId)\n        Promise.all([p1, p2]).then(function (values) {\n          let res1 = values[0]\n          let res2 = values[1]\n          if (res1.code === 0) {\n            res1.data.map(item => {\n              item.key = item.authorityId\n              item.label = `${item.prefix.replace('/**', '')}${item.path} - ${item.apiName}`\n              item.disabled = item.path === '/**'\n            })\n            that.selectApis = res1.data\n          }\n          if (res2.code === 0) {\n            const result = []\n            res2.data.map(item => {\n              if (!result.includes(item.authorityId)) {\n                result.push(item.authorityId)\n              }\n            })\n            that.formItem.authorityIds = result\n          }\n          that.modalVisible = true\n        })\n      },\n      transferRender (item) {\n        return `<span  title=\"${item.label}\">${item.label}</span>`\n      },\n      handleTransferChange (newTargetKeys, direction, moveKeys) {\n        if (newTargetKeys.indexOf('1') != -1) {\n          this.formItem.authorityIds = ['1']\n        } else {\n          this.formItem.authorityIds = newTargetKeys\n        }\n      },\n    },\n    watch: {\n      value (val) {\n        this.handleSearch()\n      }\n    },\n    mounted: function () {\n    }\n  }\n</script>\n"]}]}