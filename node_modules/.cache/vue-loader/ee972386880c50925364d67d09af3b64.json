{"remainingRequest":"/Users/yanglina/wadmin/node_modules/_vue-loader@15.7.2@vue-loader/lib/index.js??vue-loader-options!/Users/yanglina/wadmin/src/view/module/gateway/rate-limit/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yanglina/wadmin/src/view/module/gateway/rate-limit/index.vue","mtime":1576046259643},{"path":"/Users/yanglina/wadmin/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanglina/wadmin/node_modules/_babel-loader@8.0.6@babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/yanglina/wadmin/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanglina/wadmin/node_modules/_vue-loader@15.7.2@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\nexport default {\n  name: 'GatewayRateLimit',\n  data () {\n    return {\n      loading: false,\n      saving: false,\n      modalVisible: false,\n      modalTitle: '',\n      pageInfo: {\n        total: 0,\n        page: 1,\n        limit: 10\n      },\n      current: 'form1',\n      forms: [\n        'form1',\n        'form2'\n      ],\n      selectApis: [],\n      formItemRules: {\n        policyName: [\n          {required: true, message: '策略名称不能为空', trigger: 'blur'}\n        ],\n        policyType: [\n          {required: true, message: '策略类型不能为空', trigger: 'blur'}\n        ]\n      },\n      formItem: {\n        policyId: '',\n        policyName: '',\n        policyType: 'url',\n        intervalUnit: 'second',\n        limitQuota: 10,\n        apiIds: [],\n      },\n      columns: [\n        {\n          title: '策略名称',\n          key: 'policyName',\n          width: 350\n        },\n        {\n          title: '策略类型',\n          key: 'policyType',\n          width: 300\n        },\n        {\n          title: '单位时间',\n          key: 'intervalUnit'\n        },\n        {\n          title: '限流数',\n          key: 'limitQuota'\n        },\n        {\n          title: '操作',\n          slot: 'action',\n          fixed: 'right',\n          width: 150\n        }\n      ],\n      data: []\n    }\n  },\n  methods: {\n    handleModal (data) {\n      if (data) {\n        this.formItem = Object.assign({}, this.formItem, data)\n      }\n      if (this.current === this.forms[0]) {\n        this.modalTitle = data ? '编辑限流策略 - ' + this.formItem.policyName : '添加限流策略'\n        this.modalVisible = true\n      }\n      if (this.current === this.forms[1]) {\n        this.modalTitle = data ? '绑定接口 - ' + this.formItem.policyName : '绑定接口'\n        this.handleRateLimitApi(this.formItem.policyId);\n      }\n      this.formItem.policyType = this.formItem.policyType + ''\n    },\n    handleTabClick(name){\n      this.current = name\n      this.handleModal();\n    },\n    handleReset () {\n      const newData = {\n        policyId: '',\n        policyName: '',\n        policyType: 'url',\n        intervalUnit: 'second',\n        limitQuota: 10,\n        apiIds: [],\n      }\n      this.formItem = newData\n      //重置验证\n      this.forms.map(form => {\n        this.$refs[form].resetFields()\n      })\n      this.current = this.forms[0]\n      this.modalVisible = false\n      this.saving = false\n    },\n    handleSubmit () {\n      if (this.current === this.forms[0]) {\n        this.$refs[this.current].validate((valid) => {\n          if (valid) {\n            this.saving = true\n            if (this.formItem.policyId) {\n              updateRateLimit(this.formItem).then(res => {\n                this.handleReset()\n                this.handleSearch()\n                if (res.code === 0) {\n                  this.$Message.success('保存成功')\n                }\n              }).finally(() => {\n                this.saving = false\n              })\n            } else {\n              addRateLimit(this.formItem).then(res => {\n                this.handleReset()\n                this.handleSearch()\n                if (res.code === 0) {\n                  this.$Message.success('保存成功')\n                }\n              }).finally(() => {\n                this.saving = false\n              })\n            }\n          }\n        })\n      }\n      if (this.current === this.forms[1]) {\n        this.$refs[this.current].validate((valid) => {\n          if (valid) {\n            this.saving = true\n            addRateLimitApis({policyId: this.formItem.policyId, apiIds: this.formItem.apiIds}).then(res => {\n              this.handleReset()\n              this.handleSearch()\n              if (res.code === 0) {\n                this.$Message.success('绑定成功')\n              }\n            }).finally(() => {\n              this.saving = false\n            })\n          }\n        })\n      }\n    },\n    handleSearch (page) {\n      if (page) {\n        this.pageInfo.page = page\n      }\n      this.loading = true\n      getRateLimits({page: this.pageInfo.page, limit: this.pageInfo.limit}).then(res => {\n        this.data = res.data.records\n        this.pageInfo.total = parseInt(res.data.total)\n      }).finally(() => {\n        this.loading = false\n      })\n    },\n    handlePage (current) {\n      this.pageInfo.page = current\n      this.handleSearch()\n    },\n    handlePageSize (size) {\n      this.pageInfo.limit = size\n      this.handleSearch()\n    },\n    handleRemove (data) {\n      this.$Modal.confirm({\n        title: '确定删除吗？',\n        onOk: () => {\n          removeRateLimit(data.policyId).then(res => {\n            if (res.code === 0) {\n              this.pageInfo.page = 1\n              this.$Message.success('删除成功')\n            }\n            this.handleSearch()\n          })\n        }\n      })\n    },\n    handleRateLimitApi(policyId) {\n      if (!policyId) {\n        return\n      }\n      const that = this\n      const p1 = getAuthorityApi('')\n      const p2 = getRateLimitApis(policyId)\n      Promise.all([p1, p2]).then(function (values) {\n        let res1 = values[0]\n        let res2 = values[1]\n        if (res1.code === 0) {\n          res1.data.map(item => {\n            item.key = item.apiId\n            item.label = `${item.prefix.replace('/**', '')}${item.path} - ${item.apiName}`\n          })\n          that.selectApis = res1.data\n        }\n        if (res2.code === 0) {\n          let apiIds = []\n          res2.data.map(item => {\n            if (!apiIds.includes(item.apiId)) {\n              apiIds.push(item.apiId)\n            }\n          })\n          that.formItem.apiIds = apiIds\n        }\n        that.modalVisible = true\n      })\n    },\n    transferRender (item) {\n      return `<span  title=\"${item.label}\">${item.label}</span>`\n    },\n    handleTransferChange (newTargetKeys, direction, moveKeys) {\n      if (newTargetKeys.indexOf('1') != -1) {\n        this.formItem.apiIds = ['1']\n      } else {\n        this.formItem.apiIds = newTargetKeys\n      }\n    },\n    handleClick (name, row) {\n      switch (name) {\n        case 'remove':\n          this.handleRemove(row)\n          break\n      }\n    }\n  },\n  mounted: function () {\n    this.handleSearch()\n  }\n}\n",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsfile":"index.vue","sourceRoot":"src/view/module/gateway/rate-limit","sourcesContent":["<template>\n  <div>\n    <Card shadow>\n      <div class=\"search-con search-con-top\">\n        <ButtonGroup>\n          <Button class=\"search-btn\" type=\"primary\" @click=\"handleModal()\">\n            <span>添加</span>\n          </Button>\n        </ButtonGroup>\n      </div>\n      <Table border :columns=\"columns\" :data=\"data\" :loading=\"loading\">\n        <template slot=\"policyType\" slot-scope=\"{ row }\">\n          <Tag color=\"green\" v-if=\"row.policyType===1\">允许-白名单</Tag>\n          <Tag color=\"red\" v-else=\"\">拒绝-黑名单</Tag>\n        </template>\n        <template slot=\"action\" slot-scope=\"{ row }\">\n          <a @click=\"handleModal(row)\">\n            编辑</a>&nbsp;\n          <a @click=\"handleRemove(row)\">\n            删除\n          </a>\n        </template>\n      </Table>\n      <Page :total=\"pageInfo.total\" :current=\"pageInfo.page\" :page-size=\"pageInfo.limit\" show-elevator show-sizer\n            show-total\n            @on-change=\"handlePage\" @on-page-size-change='handlePageSize'></Page>\n    </Card>\n    <Modal v-model=\"modalVisible\"\n           :title=\"modalTitle\"\n           width=\"40\"\n           @on-cancel=\"handleReset\">\n      <div>\n        <Tabs :value=\"current\" @on-click=\"handleTabClick\">\n          <TabPane label=\"策略信息\" name=\"form1\">\n            <Form ref=\"form1\" v-show=\"current=='form1'\" :model=\"formItem\" :rules=\"formItemRules\" :label-width=\"100\">\n              <FormItem label=\"策略名称\" prop=\"policyName\">\n                <Input v-model=\"formItem.policyName\" placeholder=\"请输入内容\"></Input>\n              </FormItem>\n              <FormItem label=\"策略类型\" prop=\"policyType\">\n                <Select v-model=\"formItem.policyType\">\n                  <Option value=\"url\" label=\"接口(url)\"></Option>\n                  <Option disabled value=\"origin\" label=\"来源(origin)\"></Option>\n                  <Option disabled value=\"user\" label=\"用户(user)\"></Option>\n                </Select>\n              </FormItem>\n              <FormItem label=\"单位时间\" prop=\"intervalUnit\">\n                <Select v-model=\"formItem.intervalUnit\">\n                  <Option value=\"seconds\" label=\"秒(seconds)\"></Option>\n                  <Option value=\"minutes\" label=\"分钟(minutes)\"></Option>\n                  <Option value=\"hours\" label=\"小时(hours)\"></Option>\n                  <Option value=\"days\" label=\"天(days)\"></Option>\n                </Select>\n              </FormItem>\n              <FormItem label=\"限流数\" prop=\"limitQuota\">\n                <InputNumber :min=\"10\" v-model=\"formItem.limitQuota\"></InputNumber>\n              </FormItem>\n            </Form>\n          </TabPane>\n          <TabPane :disabled=\"!formItem.policyId\" label=\"绑定接口\" name=\"form2\">\n            <Alert type=\"warning\" show-icon>请注意：如果API上原来已经绑定了一个策略，则会被本策略覆盖，请慎重选择！</Alert>\n            <Form ref=\"form2\" v-show=\"current=='form2'\" :model=\"formItem\" :rules=\"formItemRules\">\n              <FormItem prop=\"authorities\">\n                <Transfer\n                  :data=\"selectApis\"\n                  :list-style=\"{width: '45%',height: '480px'}\"\n                  :titles=\"['选择接口', '已选择接口']\"\n                  :render-format=\"transferRender\"\n                  :target-keys=\"formItem.apiIds\"\n                  @on-change=\"handleTransferChange\"\n                  filterable>\n                </Transfer>\n              </FormItem>\n            </Form>\n          </TabPane>\n        </Tabs>\n        <div class=\"drawer-footer\">\n          <Button type=\"default\" @click=\"handleReset\">取消</Button>&nbsp;\n          <Button type=\"primary\" @click=\"handleSubmit\" :loading=\"saving\">保存</Button>\n        </div>\n      </div>\n    </Modal>\n  </div>\n</template>\n\n<script>\n\n  export default {\n    name: 'GatewayRateLimit',\n    data () {\n      return {\n        loading: false,\n        saving: false,\n        modalVisible: false,\n        modalTitle: '',\n        pageInfo: {\n          total: 0,\n          page: 1,\n          limit: 10\n        },\n        current: 'form1',\n        forms: [\n          'form1',\n          'form2'\n        ],\n        selectApis: [],\n        formItemRules: {\n          policyName: [\n            {required: true, message: '策略名称不能为空', trigger: 'blur'}\n          ],\n          policyType: [\n            {required: true, message: '策略类型不能为空', trigger: 'blur'}\n          ]\n        },\n        formItem: {\n          policyId: '',\n          policyName: '',\n          policyType: 'url',\n          intervalUnit: 'second',\n          limitQuota: 10,\n          apiIds: [],\n        },\n        columns: [\n          {\n            title: '策略名称',\n            key: 'policyName',\n            width: 350\n          },\n          {\n            title: '策略类型',\n            key: 'policyType',\n            width: 300\n          },\n          {\n            title: '单位时间',\n            key: 'intervalUnit'\n          },\n          {\n            title: '限流数',\n            key: 'limitQuota'\n          },\n          {\n            title: '操作',\n            slot: 'action',\n            fixed: 'right',\n            width: 150\n          }\n        ],\n        data: []\n      }\n    },\n    methods: {\n      handleModal (data) {\n        if (data) {\n          this.formItem = Object.assign({}, this.formItem, data)\n        }\n        if (this.current === this.forms[0]) {\n          this.modalTitle = data ? '编辑限流策略 - ' + this.formItem.policyName : '添加限流策略'\n          this.modalVisible = true\n        }\n        if (this.current === this.forms[1]) {\n          this.modalTitle = data ? '绑定接口 - ' + this.formItem.policyName : '绑定接口'\n          this.handleRateLimitApi(this.formItem.policyId);\n        }\n        this.formItem.policyType = this.formItem.policyType + ''\n      },\n      handleTabClick(name){\n        this.current = name\n        this.handleModal();\n      },\n      handleReset () {\n        const newData = {\n          policyId: '',\n          policyName: '',\n          policyType: 'url',\n          intervalUnit: 'second',\n          limitQuota: 10,\n          apiIds: [],\n        }\n        this.formItem = newData\n        //重置验证\n        this.forms.map(form => {\n          this.$refs[form].resetFields()\n        })\n        this.current = this.forms[0]\n        this.modalVisible = false\n        this.saving = false\n      },\n      handleSubmit () {\n        if (this.current === this.forms[0]) {\n          this.$refs[this.current].validate((valid) => {\n            if (valid) {\n              this.saving = true\n              if (this.formItem.policyId) {\n                updateRateLimit(this.formItem).then(res => {\n                  this.handleReset()\n                  this.handleSearch()\n                  if (res.code === 0) {\n                    this.$Message.success('保存成功')\n                  }\n                }).finally(() => {\n                  this.saving = false\n                })\n              } else {\n                addRateLimit(this.formItem).then(res => {\n                  this.handleReset()\n                  this.handleSearch()\n                  if (res.code === 0) {\n                    this.$Message.success('保存成功')\n                  }\n                }).finally(() => {\n                  this.saving = false\n                })\n              }\n            }\n          })\n        }\n        if (this.current === this.forms[1]) {\n          this.$refs[this.current].validate((valid) => {\n            if (valid) {\n              this.saving = true\n              addRateLimitApis({policyId: this.formItem.policyId, apiIds: this.formItem.apiIds}).then(res => {\n                this.handleReset()\n                this.handleSearch()\n                if (res.code === 0) {\n                  this.$Message.success('绑定成功')\n                }\n              }).finally(() => {\n                this.saving = false\n              })\n            }\n          })\n        }\n      },\n      handleSearch (page) {\n        if (page) {\n          this.pageInfo.page = page\n        }\n        this.loading = true\n        getRateLimits({page: this.pageInfo.page, limit: this.pageInfo.limit}).then(res => {\n          this.data = res.data.records\n          this.pageInfo.total = parseInt(res.data.total)\n        }).finally(() => {\n          this.loading = false\n        })\n      },\n      handlePage (current) {\n        this.pageInfo.page = current\n        this.handleSearch()\n      },\n      handlePageSize (size) {\n        this.pageInfo.limit = size\n        this.handleSearch()\n      },\n      handleRemove (data) {\n        this.$Modal.confirm({\n          title: '确定删除吗？',\n          onOk: () => {\n            removeRateLimit(data.policyId).then(res => {\n              if (res.code === 0) {\n                this.pageInfo.page = 1\n                this.$Message.success('删除成功')\n              }\n              this.handleSearch()\n            })\n          }\n        })\n      },\n      handleRateLimitApi(policyId) {\n        if (!policyId) {\n          return\n        }\n        const that = this\n        const p1 = getAuthorityApi('')\n        const p2 = getRateLimitApis(policyId)\n        Promise.all([p1, p2]).then(function (values) {\n          let res1 = values[0]\n          let res2 = values[1]\n          if (res1.code === 0) {\n            res1.data.map(item => {\n              item.key = item.apiId\n              item.label = `${item.prefix.replace('/**', '')}${item.path} - ${item.apiName}`\n            })\n            that.selectApis = res1.data\n          }\n          if (res2.code === 0) {\n            let apiIds = []\n            res2.data.map(item => {\n              if (!apiIds.includes(item.apiId)) {\n                apiIds.push(item.apiId)\n              }\n            })\n            that.formItem.apiIds = apiIds\n          }\n          that.modalVisible = true\n        })\n      },\n      transferRender (item) {\n        return `<span  title=\"${item.label}\">${item.label}</span>`\n      },\n      handleTransferChange (newTargetKeys, direction, moveKeys) {\n        if (newTargetKeys.indexOf('1') != -1) {\n          this.formItem.apiIds = ['1']\n        } else {\n          this.formItem.apiIds = newTargetKeys\n        }\n      },\n      handleClick (name, row) {\n        switch (name) {\n          case 'remove':\n            this.handleRemove(row)\n            break\n        }\n      }\n    },\n    mounted: function () {\n      this.handleSearch()\n    }\n  }\n</script>\n"]}]}