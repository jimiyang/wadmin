{"remainingRequest":"/Users/yanglina/wadmin/node_modules/_babel-loader@8.0.6@babel-loader/lib/index.js!/Users/yanglina/wadmin/src/router/index.js","dependencies":[{"path":"/Users/yanglina/wadmin/src/router/index.js","mtime":1577607095974},{"path":"/Users/yanglina/wadmin/.babelrc","mtime":1576127290134},{"path":"/Users/yanglina/wadmin/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanglina/wadmin/node_modules/_babel-loader@8.0.6@babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import Vue from 'vue';\nimport Router from 'vue-router';\nimport routes from './routers';\nimport store from '@/store';\nimport iView from 'iview';\nimport config from '@/config';\nimport { setToken, getToken, getMenuByRouter } from '@/libs/util';\nimport asyncRoutes from './asyncRouters.js';\nconst {\n  homeName\n} = config;\nVue.use(Router); // 存放加载的动态路由\n\nlet dyncRouters = [];\nlet BASE_URL = '';\n\nswitch (process.env.NODE_ENV) {\n  case 'development':\n    BASE_URL = config.publicPath.dev; // 这里是本地的请求url\n\n    break;\n\n  case 'production':\n    BASE_URL = config.publicPath.pro; // 生产环境url\n\n    break;\n}\n\nconst router = new Router({\n  base: BASE_URL,\n  routes: routes //mode: 'history'\n\n});\nconst LOGIN_PAGE_NAME = 'login';\nrouter.beforeEach((to, from, next) => {\n  const token = getToken(); //window.localStorage.getItem('token')\n\n  console.log('进入路由', to);\n\n  if (!to.meta.name || to.meta.requireAuth) {\n    // 判断该路由是否需要登录权限\n    if (token) {\n      // 通过vuex state获取当前的token是否存在\n      if (!dyncRouters || dyncRouters.length === 0) {\n        dyncRouters = dyncRouters.concat(asyncRoutes);\n        router.addRoutes(dyncRouters);\n        routes.push(...dyncRouters); //防止重复添加路由报错\n\n        const routerPush = Router.prototype.push;\n\n        Router.prototype.push = function push(location) {\n          return routerPush.call(this, location).catch(error => error);\n        };\n      }\n\n      next();\n    } else {\n      //console.log('该页面需要登陆')\n      next({\n        name: 'login' // query: {redirect: to.fullPath} // 将跳转的路由path作为参数，登录成功后跳转到该路由\n\n      });\n    }\n  } else {\n    //console.log(dyncRouters)\n    next();\n  }\n});\nexport default router;",{"version":3,"sources":["/Users/yanglina/wadmin/src/router/index.js"],"names":["Vue","Router","routes","store","iView","config","setToken","getToken","getMenuByRouter","asyncRoutes","homeName","use","dyncRouters","BASE_URL","process","env","NODE_ENV","publicPath","dev","pro","router","base","LOGIN_PAGE_NAME","beforeEach","to","from","next","token","console","log","meta","name","requireAuth","length","concat","addRoutes","push","routerPush","prototype","location","call","catch","error"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,KAAhB;AACA,OAAOC,MAAP,MAAmB,YAAnB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SAASC,QAAT,EAAmBC,QAAnB,EAA6BC,eAA7B,QAAmD,aAAnD;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAeL,MAArB;AACAL,GAAG,CAACW,GAAJ,CAAQV,MAAR,E,CACA;;AACA,IAAIW,WAAW,GAAG,EAAlB;AAEA,IAAIC,QAAQ,GAAG,EAAf;;AACA,QAAQC,OAAO,CAACC,GAAR,CAAYC,QAApB;AACE,OAAK,aAAL;AACEH,IAAAA,QAAQ,GAAGR,MAAM,CAACY,UAAP,CAAkBC,GAA7B,CADF,CACmC;;AACjC;;AACF,OAAK,YAAL;AACEL,IAAAA,QAAQ,GAAGR,MAAM,CAACY,UAAP,CAAkBE,GAA7B,CADF,CACmC;;AACjC;AANJ;;AAQA,MAAMC,MAAM,GAAG,IAAInB,MAAJ,CAAW;AACxBoB,EAAAA,IAAI,EAAER,QADkB;AAExBX,EAAAA,MAAM,EAAEA,MAFgB,CAGxB;;AAHwB,CAAX,CAAf;AAKA,MAAMoB,eAAe,GAAG,OAAxB;AACAF,MAAM,CAACG,UAAP,CAAkB,CAACC,EAAD,EAAKC,IAAL,EAAWC,IAAX,KAAoB;AACpC,QAAMC,KAAK,GAAGpB,QAAQ,EAAtB,CADoC,CACX;;AACzBqB,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAmBL,EAAnB;;AACA,MAAI,CAACA,EAAE,CAACM,IAAH,CAAQC,IAAT,IAAiBP,EAAE,CAACM,IAAH,CAAQE,WAA7B,EAA0C;AAAE;AAC1C,QAAIL,KAAJ,EAAW;AAAE;AACZ,UAAI,CAACf,WAAD,IAAgBA,WAAW,CAACqB,MAAZ,KAAuB,CAA3C,EAA8C;AAC7CrB,QAAAA,WAAW,GAAGA,WAAW,CAACsB,MAAZ,CAAmBzB,WAAnB,CAAd;AACAW,QAAAA,MAAM,CAACe,SAAP,CAAiBvB,WAAjB;AACAV,QAAAA,MAAM,CAACkC,IAAP,CAAY,GAAGxB,WAAf,EAH6C,CAI7C;;AACA,cAAMyB,UAAU,GAAGpC,MAAM,CAACqC,SAAP,CAAiBF,IAApC;;AACAnC,QAAAA,MAAM,CAACqC,SAAP,CAAiBF,IAAjB,GAAwB,SAASA,IAAT,CAAcG,QAAd,EAAwB;AAChD,iBAAOF,UAAU,CAACG,IAAX,CAAgB,IAAhB,EAAsBD,QAAtB,EAAgCE,KAAhC,CAAsCC,KAAK,IAAGA,KAA9C,CAAP;AACC,SAFD;AAGA;;AACAhB,MAAAA,IAAI;AACL,KAZD,MAYO;AACL;AACAA,MAAAA,IAAI,CAAC;AACHK,QAAAA,IAAI,EAAE,OADH,CACW;;AADX,OAAD,CAAJ;AAGD;AACF,GAnBD,MAmBO;AACP;AACEL,IAAAA,IAAI;AACL;AACF,CA1BD;AA2BA,eAAeN,MAAf","sourcesContent":["import Vue from 'vue'\nimport Router from 'vue-router'\nimport routes from './routers'\nimport store from '@/store'\nimport iView from 'iview'\nimport config from '@/config'\nimport { setToken, getToken, getMenuByRouter} from '@/libs/util'\nimport asyncRoutes from './asyncRouters.js'\nconst { homeName } = config\nVue.use(Router)\n// 存放加载的动态路由\nlet dyncRouters = []\n\nlet BASE_URL = ''\nswitch (process.env.NODE_ENV) {\n  case 'development':\n    BASE_URL = config.publicPath.dev // 这里是本地的请求url\n    break\n  case 'production':\n    BASE_URL = config.publicPath.pro // 生产环境url\n    break\n}\nconst router = new Router({\n  base: BASE_URL,\n  routes: routes,\n  //mode: 'history'\n})\nconst LOGIN_PAGE_NAME = 'login'\nrouter.beforeEach((to, from, next) => {\n  const token = getToken() //window.localStorage.getItem('token')\n  console.log('进入路由',to)\n  if (!to.meta.name || to.meta.requireAuth) { // 判断该路由是否需要登录权限\n    if (token) { // 通过vuex state获取当前的token是否存在\n\t    if (!dyncRouters || dyncRouters.length === 0) {\n\t\t    dyncRouters = dyncRouters.concat(asyncRoutes)\n\t\t    router.addRoutes(dyncRouters)\n\t\t    routes.push(...dyncRouters)\n\t\t    //防止重复添加路由报错\n\t\t    const routerPush = Router.prototype.push\n\t\t    Router.prototype.push = function push(location) {\n\t\t\t\t  return routerPush.call(this, location).catch(error=> error)\n\t\t    }\n\t    }\n      next()\n    } else {\n      //console.log('该页面需要登陆')\n      next({\n        name: 'login' // query: {redirect: to.fullPath} // 将跳转的路由path作为参数，登录成功后跳转到该路由\n      })\n    }\n  } else {\n\t\t//console.log(dyncRouters)\n    next()\n  }\n})\nexport default router"]}]}