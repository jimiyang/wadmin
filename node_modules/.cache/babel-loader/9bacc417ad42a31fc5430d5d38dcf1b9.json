{"remainingRequest":"/Users/yanglina/wadmin/node_modules/_babel-loader@8.0.6@babel-loader/lib/index.js!/Users/yanglina/wadmin/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js??ref--0-0!/Users/yanglina/wadmin/node_modules/_vue-loader@15.7.2@vue-loader/lib/index.js??vue-loader-options!/Users/yanglina/wadmin/src/view/module/system/menus/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yanglina/wadmin/src/view/module/system/menus/index.vue","mtime":1577603269576},{"path":"/Users/yanglina/wadmin/.babelrc","mtime":1576127290134},{"path":"/Users/yanglina/wadmin/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanglina/wadmin/node_modules/_babel-loader@8.0.6@babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/yanglina/wadmin/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanglina/wadmin/node_modules/_vue-loader@15.7.2@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { listConvertTree, updateTreeNode } from '@/libs/util';\nimport { deleteMenu, delBatchMenu, getUserInfo, getMenuId, getMenuList, getMenuAllList, savePermissionMenu, getPermissionId, saveMenu, updateMenu } from '@/api/menu';\nimport { roleSelectList } from '@/api/role';\nimport MenuAction from './menu-action.vue';\nimport icons from './icons';\nexport default {\n  name: 'SystemMenu',\n  components: {\n    MenuAction\n  },\n\n  data() {\n    const validateEn = (rule, value, callback) => {\n      let reg = /^[_a-zA-Z0-9]+$/;\n\n      if (value === '') {\n        callback(new Error('菜单标识不能为空'));\n      } else if (value !== '' && !reg.test(value)) {\n        callback(new Error('只允许字母、数字、下划线'));\n      } else {\n        callback();\n      }\n    };\n\n    return {\n      confirmModal: false,\n      saving: false,\n      visible: false,\n      selectIcons: icons,\n      selectTreeData: [{\n        id: 0,\n        menuName: '无'\n      }],\n      formItemRules: {\n        menuCode: [{\n          required: true,\n          validator: validateEn,\n          trigger: 'blur'\n        }],\n        menuName: [{\n          required: true,\n          message: '菜单名称不能为空',\n          trigger: 'blur'\n        }]\n      },\n      search: {\n        name: null\n      },\n      formItem: {\n        menuCode: null,\n        menuName: '',\n        iconPath: 'md-document',\n        menuPath: null,\n        target: '_self',\n        status: 0,\n        operateUserId: null,\n        pid: 0,\n        type: 0\n      },\n      columns: [{\n        title: '菜单名称',\n        key: 'menuName'\n      }, {\n        title: '操作',\n        slot: 'action',\n        width: 150\n      }],\n      data: []\n    };\n  },\n\n  methods: {\n    handleEdit(row) {\n      this.formItem = row;\n    },\n\n    deleteRole(row) {\n      deleteMenu(row.id).then(res => {\n        if (res.code === 200) {\n          this.$Message.success(res.message);\n          this.handleSearch();\n        }\n      });\n    },\n\n    treeSelectNormalizer(node) {\n      return {\n        id: node.id,\n        label: node.menuName,\n        children: node.children\n      };\n    },\n\n    setSelectTree(data) {\n      let arr = [],\n          child = [];\n      data.map(item => {\n        console.log(Number(item.pid));\n\n        if (Number(item.pid) === 0) {\n          arr.push({\n            item\n          });\n          console.log(arr);\n        }\n      });\n      console.log(arr);\n      arr.map((item, index) => {\n        data.map(it => {\n          if (item.id === it.pid) {\n            arr[i].children.push({\n              it\n            });\n          }\n        });\n      }); //console.log(arr)\n\n      this.selectTreeData = data; //console.log(this.selectTreeData)\n    },\n\n    setEnabled(enabled) {\n      if (enabled) {\n        this.handleReset();\n      }\n    },\n\n    rowClick(data) {\n      this.handleReset();\n\n      if (data) {\n        this.formItem = Object.assign({}, data.row);\n      }\n\n      this.formItem.status = this.formItem.status + '';\n    },\n\n    handleReset() {\n      const newData = {\n        menuCode: null,\n        menuName: '',\n        iconPath: 'md-document',\n        menuPath: null,\n        target: '_self',\n        status: 0,\n        operateUserId: null,\n        pid: 0,\n        type: 0\n      };\n      this.formItem = newData;\n      this.$refs['menuForm'].resetFields();\n      this.saving = false;\n    },\n\n    handleSubmit() {\n      this.$refs['menuForm'].validate(valid => {\n        if (valid) {\n          this.saving = true;\n\n          if (!this.formItem.id) {\n            saveMenu(this.formItem).then(res => {\n              if (res.code === 200) {\n                this.$Message.success(res.message);\n              }\n\n              this.handleSearch();\n              this.getMenuList(); //加载菜单树\n            }).finally(() => {\n              this.saving = false;\n            });\n          } else {\n            updateMenu(this.formItem).then(res => {\n              if (res.code === 200) {\n                this.$Message.success(res.message);\n              }\n\n              this.getMenuList(); //加载菜单树\n\n              this.handleSearch();\n            }).finally(() => {\n              this.saving = false;\n            });\n          }\n        }\n      });\n    },\n\n    handleRemove() {\n      removeMenu(this.formItem.menuId).then(res => {\n        this.handleReset();\n        this.handleSearch();\n\n        if (res.code === 0) {\n          this.$Message.success('删除成功');\n        }\n      });\n    },\n\n    onIconClick(item) {\n      this.formItem.iconPath = item;\n    },\n\n    getMenuList() {\n      //菜单树\n      getMenuList(this.search).then(res => {\n        if (res.code === 200) {\n          this.setSelectTree(this.data);\n        }\n      });\n    },\n\n    handleSearch() {\n      getMenuAllList(this.search).then(res => {\n        if (res.code === 200) {\n          this.data = res.data.records;\n        }\n      });\n    }\n\n  },\n  mounted: function () {\n    this.getMenuList(); //加载菜单树\n\n    this.handleSearch();\n  }\n};",{"version":3,"sources":["index.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"menu\">\n    <Row :gutter=\"12\">\n      <Col :xs=\"13\" :sm=\"13\" :md=\"14\" :lg=\"14\">\n        <Card shadow>\n          <!--<tree-table style=\"max-height:700px;overflow: auto\"\n              expand-key=\"menuName\"\n              @radio-click=\"rowClick\"\n              :expand-type=\"false\"\n              :is-fold=\"false\"\n              :tree-type=\"true\"\n              :selectable=\"false\"\n              :columns=\"columns\"\n              :data=\"data\">\n            <template slot=\"status\" slot-scope=\"scope\">\n              <Badge v-if=\"scope.row.status===1\" status=\"success\"/>\n              <Badge v-else=\"\" status=\"error\"/>\n              <Icon :type=\"scope.row.icon\" size=\"16\"/>\n              <a>ddd</a>\n            </template>\n          </tree-table>-->\n          <Table border :columns=\"columns\" :data=\"data\">\n            <template slot=\"action\" slot-scope=\"{ row }\">\n              <a @click=\"handleEdit(row)\">编辑</a>&nbsp;\n              <a @click=\"deleteRole(row)\">删除</a>&nbsp;\n            </template>\n          </Table>\n        </Card>\n      </Col>\n      <Col :xs=\"16\" :sm=\"16\" :md=\"16\" :lg=\"10\">\n      <Card shadow>\n        <div class=\"search-con search-con-top\">\n          <ButtonGroup>\n            <Button type=\"primary\"  @click=\"setEnabled(true)\">添加\n            </Button>\n          </ButtonGroup>\n          <Modal\n            v-model=\"confirmModal\"\n            title=\"提示\"\n            @on-ok=\"handleRemove\">\n            确定删除,菜单资源【{{formItem.menuName}}】吗?{{formItem.children && formItem.children.length > 0 ?\n            '存在子菜单,将一起删除.是否继续?' : ''}}\n\n          </Modal>\n        </div>\n        <Form ref=\"menuForm\" :model=\"formItem\" :rules=\"formItemRules\" :label-width=\"80\">\n          <FormItem label=\"上级菜单\" prop=\"pid\">\n            <treeselect\n              :options=\"selectTreeData\"\n              placeholder=\"请选择一级菜单\"\n              v-model=\"formItem.pid\"\n              :normalizer=\"treeSelectNormalizer\"\n            />\n            <!--<pre class=\"result\">{{ formItem.pid }}</pre>-->\n          </FormItem>\n          <FormItem label=\"菜单编码\" prop=\"menuCode\">\n            <Input v-model=\"formItem.menuCode\" placeholder=\"请输入内容\" />\n          </FormItem>\n          <FormItem label=\"菜单名称\" prop=\"menuName\">\n            <Input v-model=\"formItem.menuName\" placeholder=\"请输入内容\" />\n          </FormItem>\n          <FormItem label=\"页面地址\" prop=\"menuPath\">\n            <Input v-model=\"formItem.menuPath\" placeholder=\"请输入内容\" />\n            <span v-if=\"formItem.scheme === '/'\">前端组件：/view/module/{{formItem.menuPath}}.vue</span>\n          </FormItem>\n           <FormItem label=\"图标\">\n            <Input v-model=\"formItem.iconPath\" placeholder=\"请输入内容\">\n              <Icon size=\"22\" :type=\"formItem.iconPath\" slot=\"prepend\"/>\n              <Poptip width=\"600\" slot=\"append\" placement=\"bottom\">\n                <Button icon=\"ios-search\"></Button>\n                <div slot=\"content\">\n                  <ul class=\"icons\">\n                    <li class=\"icons-item\" :title=\"item\" @click=\"onIconClick(item)\" v-for=\"(item, index) in selectIcons\" :key=\"index\">\n                      <Icon :type=\"item\" size=\"28\"/>\n                      <p>{{item}}</p>\n                    </li>\n                  </ul>\n                </div>\n              </Poptip>\n            </Input>\n          </FormItem>\n          <FormItem label=\"优先级\">\n            <InputNumber v-model=\"formItem.sort\"></InputNumber>\n          </FormItem>\n          <FormItem label=\"状态\">\n            <RadioGroup v-model=\"formItem.status\" type=\"button\">\n              <Radio :label=\"0\">禁用</Radio>\n              <Radio :label=\"1\">启用</Radio>\n            </RadioGroup>\n          </FormItem>\n          <FormItem>\n            <Button @click=\"handleSubmit\" :loading=\"saving\" type=\"primary\">保存</Button>\n            <Button @click=\"setEnabled(true)\" style=\"margin-left: 8px\">重置</Button>\n          </FormItem>\n        </Form>\n      </Card>\n      </Col>\n    </Row>\n  </div>\n</template>\n<script>\n  import {listConvertTree, updateTreeNode} from '@/libs/util'\n  import {\n    deleteMenu,\n    delBatchMenu,\n    getUserInfo,\n    getMenuId,\n    getMenuList,\n    getMenuAllList,\n    savePermissionMenu,\n    getPermissionId,\n    saveMenu,\n    updateMenu\n  } from '@/api/menu'\n   import {\n    roleSelectList,\n  } from '@/api/role'\n  import MenuAction from './menu-action.vue'\n  import icons from './icons'\n  export default {\n    name: 'SystemMenu',\n    components: {\n      MenuAction\n    },\n    data () {\n      const validateEn = (rule, value, callback) => {\n        let reg = /^[_a-zA-Z0-9]+$/\n        if (value === '') {\n          callback(new Error('菜单标识不能为空'))\n        } else if (value !== '' && !reg.test(value)) {\n          callback(new Error('只允许字母、数字、下划线'))\n        } else {\n          callback()\n        }\n      }\n      return {\n        confirmModal: false,\n        saving: false,\n        visible: false,\n        selectIcons: icons,\n        selectTreeData: [{\n          id: 0,\n          menuName: '无'\n        }],\n        formItemRules: {\n          menuCode: [\n            {required: true, validator: validateEn, trigger: 'blur'}\n          ],\n          menuName: [\n            {required: true, message: '菜单名称不能为空', trigger: 'blur'}\n          ]\n        },\n        search: {\n          name: null\n        },\n        formItem: {\n          menuCode: null,\n          menuName: '',\n          iconPath: 'md-document',\n          menuPath: null,\n          target: '_self',\n          status: 0,\n          operateUserId: null,\n          pid: 0,\n          type: 0\n        },\n        columns: [\n          {\n            title: '菜单名称',\n            key: 'menuName',\n          },\n          {\n            title: '操作',\n            slot: 'action',\n            width: 150\n          }\n        ],\n        data: []\n      }\n    },\n    methods: {\n      handleEdit(row) {\n        this.formItem = row\n      },\n      deleteRole(row) {\n        deleteMenu(row.id).then(res => {\n          if(res.code === 200) {\n            this.$Message.success(res.message)\n            this.handleSearch()\n          }\n        })\n      },\n      treeSelectNormalizer (node) {\n        return {\n          id: node.id,\n          label: node.menuName,\n          children: node.children\n        }\n      },\n      setSelectTree (data) {\n        let arr = [], child = []\n        data.map(item => {\n          console.log(Number(item.pid))\n          if(Number(item.pid) === 0){\n            arr.push({item})\n            console.log(arr)\n          }\n        })\n         console.log(arr)\n        arr.map((item, index) => {\n          data.map(it => {\n            if (item.id === it.pid) {\n              arr[i].children.push({it})\n            }\n          })\n        })\n        //console.log(arr)\n        this.selectTreeData = data\n        //console.log(this.selectTreeData)\n      },\n      setEnabled (enabled) {\n        if (enabled) {\n          this.handleReset()\n        }\n      },\n      rowClick (data) {\n        this.handleReset()\n        if (data) {\n          this.formItem = Object.assign({}, data.row)\n        }\n        this.formItem.status = this.formItem.status + ''\n      },\n      handleReset () {\n        const newData = {\n          menuCode: null,\n          menuName: '',\n          iconPath: 'md-document',\n          menuPath: null,\n          target: '_self',\n          status: 0,\n          operateUserId: null,\n          pid: 0,\n          type: 0\n        }\n        this.formItem = newData\n        this.$refs['menuForm'].resetFields()\n        this.saving = false\n      },\n      handleSubmit () {\n        this.$refs['menuForm'].validate((valid) => {\n          if (valid) {\n            this.saving = true\n            if (!this.formItem.id) {\n              saveMenu(this.formItem).then(res => {\n                if (res.code === 200) {\n                  this.$Message.success(res.message)\n                }\n                this.handleSearch()\n                this.getMenuList() //加载菜单树\n              }).finally(() => {\n                this.saving = false\n              })\n            } else {\n              updateMenu(this.formItem).then(res => {\n                if (res.code === 200) {\n                  this.$Message.success(res.message)\n                }\n                this.getMenuList() //加载菜单树\n                this.handleSearch()\n              }).finally(() => {\n                this.saving = false\n              })\n            }\n          }\n        })\n      },\n      handleRemove () {\n        removeMenu(this.formItem.menuId).then(res => {\n          this.handleReset()\n          this.handleSearch()\n          if (res.code === 0) {\n            this.$Message.success('删除成功')\n          }\n        })\n      },\n      onIconClick (item) {\n        this.formItem.iconPath = item\n      },\n      getMenuList () {\n        //菜单树\n        getMenuList(this.search).then(res => {\n          if (res.code === 200) {\n            this.setSelectTree(this.data)\n          }\n        })\n      },\n      handleSearch () {\n        getMenuAllList(this.search).then(res => {\n          if (res.code === 200) {\n            this.data = res.data.records\n          }\n        })\n      }\n    },\n    mounted: function () {\n      this.getMenuList() //加载菜单树\n      this.handleSearch()\n    }\n  }\n</script>\n<style>\n .menu{\n  padding: 20px;\n }\n  .icons {\n    overflow: auto;\n    zoom: 1;\n    height: 300px;\n  }\n\n  .icons-item {\n    float: left;\n    margin: 6px;\n    width: 60px;\n    text-align: center;\n    list-style: none;\n    cursor: pointer;\n    color: #5c6b77;\n    transition: all .2s ease;\n    position: relative;\n  }\n\n  .icons-item p {\n    word-break: break-all;\n    overflow: hidden;\n  }\n</style>\n"],"sourceRoot":"src/view/module/system/menus"}]}