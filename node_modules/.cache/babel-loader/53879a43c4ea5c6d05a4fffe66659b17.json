{"remainingRequest":"/Users/yanglina/wadmin/node_modules/_babel-loader@8.0.6@babel-loader/lib/index.js!/Users/yanglina/wadmin/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js??ref--0-0!/Users/yanglina/wadmin/node_modules/_vue-loader@15.7.2@vue-loader/lib/index.js??vue-loader-options!/Users/yanglina/wadmin/src/view/module/task/job/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yanglina/wadmin/src/view/module/task/job/index.vue","mtime":1576046414235},{"path":"/Users/yanglina/wadmin/.babelrc","mtime":1576127290134},{"path":"/Users/yanglina/wadmin/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanglina/wadmin/node_modules/_babel-loader@8.0.6@babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/yanglina/wadmin/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanglina/wadmin/node_modules/_vue-loader@15.7.2@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { listConvertTree } from '@/libs/util'; //import {getAllApi} from '@/api/api'\n\nexport default {\n  name: 'TaskJob',\n\n  data() {\n    return {\n      loading: false,\n      modalVisible: false,\n      modalTitle: '',\n      saving: false,\n      pageInfo: {\n        total: 0,\n        page: 1,\n        limit: 10\n      },\n      selectApis: [],\n      formItemRules: {\n        jobName: [{\n          required: true,\n          message: '任务名称不能为空',\n          trigger: 'blur'\n        }],\n        jobType: [{\n          required: true,\n          message: '任务类型不能为空',\n          trigger: 'blur'\n        }],\n        cron: [{\n          required: true,\n          message: 'cron表达式不能为空',\n          trigger: 'blur'\n        }],\n        path: [{\n          required: true,\n          message: '调度接口不能为空',\n          trigger: 'blur'\n        }],\n        alarmMail: [{\n          required: false,\n          type: 'email',\n          message: '邮箱格式不正确',\n          trigger: 'blur'\n        }],\n        startTime: [{\n          required: true,\n          message: '开始时间不能为空'\n        }],\n        repeatInterval: [{\n          required: true,\n          message: '间隔时间不能为空'\n        }],\n        repeatCount: [{\n          required: true,\n          message: '重试次数不能为空'\n        }]\n      },\n      formItem: {\n        newData: true,\n        jobName: '',\n        jobDescription: '',\n        jobType: 'cron',\n        cron: '',\n        startTime: '',\n        endTime: '',\n        repeatInterval: 10000,\n        repeatCountType: '0',\n        repeatCount: 0,\n        serviceId: '',\n        path: '',\n        method: '',\n        contentType: '',\n        alarmMail: ''\n      },\n      columns: [{\n        type: 'selection',\n        width: 60,\n        align: 'center'\n      }, {\n        title: '任务名称',\n        key: 'jobName',\n        width: 200\n      }, {\n        title: '调度信息',\n        width: 350,\n        slot: 'type'\n      }, {\n        title: '状态',\n        key: 'jobStatus',\n        slot: 'status'\n      }, {\n        title: '任务描述',\n        key: 'jobDescription'\n      }, {\n        title: '操作',\n        key: '',\n        slot: 'action',\n        fixed: 'right',\n        width: 150\n      }],\n      data: []\n    };\n  },\n\n  methods: {\n    handleModal(data) {\n      if (data) {\n        this.modalTitle = '编辑任务 - ' + data.jobName;\n        this.formItem = Object.assign({}, this.formItem, data);\n        this.formItem.jobType = this.formItem.jobTrigger === 'org.quartz.impl.triggers.SimpleTriggerImpl' ? 'simple' : 'cron';\n        this.formItem.cron = data.cronExpression;\n        this.formItem.startTime = data.startDate;\n        this.formItem.endTime = data.endDate;\n        this.formItem.repeatInterval = data.repeatInterval ? parseInt(data.repeatInterval) : 0;\n        this.formItem.repeatCountType = data.repeatCount + '';\n        this.formItem.path = data.data.path;\n        this.formItem.serviceId = data.data.serviceId;\n        this.formItem.method = data.data.method;\n        this.formItem.contentType = data.data.contentType;\n        this.formItem.alarmMail = data.data.alarmMail;\n        this.formItem.newData = false;\n      } else {\n        this.modalTitle = '添加任务';\n      }\n\n      this.modalVisible = true;\n    },\n\n    handleTabClick(name) {\n      this.current = name;\n      this.handleModal();\n    },\n\n    handleReset() {\n      const newData = {\n        newData: true,\n        jobName: '',\n        jobDescription: '',\n        jobType: 'cron',\n        cron: '',\n        startTime: '',\n        endTime: '',\n        repeatInterval: 10000,\n        repeatCountType: '0',\n        repeatCount: 0,\n        serviceId: '',\n        path: '',\n        method: '',\n        contentType: '',\n        alarmMail: ''\n      };\n      this.formItem = newData; //重置验证\n\n      this.$refs['form1'].resetFields();\n      this.modalVisible = false;\n      this.saving = false;\n    },\n\n    handleSubmit() {\n      this.$refs['form1'].validate(valid => {\n        if (valid) {\n          if (this.formItem.jobType === 'simple') {\n            this.formItem.startTime = this.formItem.startTime ? this.formItem.startTime.pattern('yyyy-MM-dd HH:mm:ss') : '';\n            this.formItem.endTime = this.formItem.endTime ? this.formItem.endTime.pattern('yyyy-MM-dd HH:mm:ss') : '';\n          }\n\n          this.saving = true;\n\n          if (!this.formItem.newData) {\n            updateHttpJob(this.formItem).then(res => {\n              if (res.code === 0) {\n                this.$Message.success('保存成功');\n              }\n\n              this.handleReset();\n              this.handleSearch();\n            }).finally(() => {\n              this.saving = false;\n            });\n          } else {\n            addHttpJob(this.formItem).then(res => {\n              if (res.code === 0) {\n                this.$Message.success('保存成功');\n              }\n\n              this.handleReset();\n              this.handleSearch();\n            }).finally(() => {\n              this.saving = false;\n            });\n          }\n        }\n      });\n    },\n\n    handleRemove(data) {\n      this.$Modal.confirm({\n        title: '确定删除吗？',\n        onOk: () => {\n          removeJob(data.jobName).then(res => {\n            this.handleSearch();\n\n            if (res.code === 0) {\n              this.pageInfo.page = 1;\n              this.$Message.success('删除成功');\n            }\n          });\n        }\n      });\n    },\n\n    handlePause(data) {\n      this.$Modal.confirm({\n        title: '确定暂停任务吗？',\n        onOk: () => {\n          pauseJob(data.jobName).then(res => {\n            this.handleSearch();\n\n            if (res.code === 0) {\n              this.pageInfo.page = 1;\n              this.$Message.success('暂停成功');\n            }\n          });\n        }\n      });\n    },\n\n    handleResume(data) {\n      this.$Modal.confirm({\n        title: '确定恢复任务吗？',\n        onOk: () => {\n          resumeJob(data.jobName).then(res => {\n            this.handleSearch();\n\n            if (res.code === 0) {\n              this.pageInfo.page = 1;\n              this.$Message.success('恢复成功');\n            }\n          });\n        }\n      });\n    },\n\n    handleSearch(page) {\n      if (page) {\n        this.pageInfo.page = page;\n      }\n\n      this.loading = true;\n      getJobs(this.pageInfo).then(res => {\n        this.data = res.data.records;\n        this.pageInfo.total = parseInt(res.data.total);\n      }).finally(() => {\n        this.loading = false;\n      });\n    },\n\n    handleLoadApiList() {\n      this.loading = true;\n    },\n\n    handlePage(current) {\n      this.pageInfo.page = current;\n      this.handleSearch();\n    },\n\n    handlePageSize(size) {\n      this.pageInfo.limit = size;\n      this.handleSearch();\n    },\n\n    handleOnSelectChange(value) {\n      let api = {};\n      this.selectApis.some(item => {\n        if (item.path === value) {\n          api = item;\n          return true;\n        }\n      });\n      this.formItem.serviceId = api.serviceId;\n      this.formItem.path = api.path;\n      this.formItem.contentType = api.contentType;\n      this.formItem.method = api.requestMethod;\n    },\n\n    handleClick(name, row) {\n      switch (name) {\n        case 'pause':\n          this.handlePause(row);\n          break;\n\n        case 'resume':\n          this.handleResume(row);\n          break;\n\n        case 'remove':\n          this.handleRemove(row);\n          break;\n      }\n    },\n\n    repeatCountTypeChange(value) {\n      this.formItem.repeatCount = parseInt(value);\n    }\n\n  },\n  mounted: function () {\n    this.handleSearch();\n    this.handleLoadApiList();\n  }\n};",{"version":3,"sources":["index.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div>\n    <Card shadow>\n      <div class=\"search-con search-con-top\">\n        <ButtonGroup>\n          <Button :disabled=\"hasAuthority('jobEdit')?false:true\" class=\"search-btn\" type=\"primary\"\n                  @click=\"handleModal()\">\n            <span>添加</span>\n          </Button>\n        </ButtonGroup>\n      </div>\n      <Table border :columns=\"columns\" :data=\"data\" :loading=\"loading\">\n        <template slot=\"status\" slot-scope=\"{ row }\">\n          <Badge v-if=\"row.jobStatus==='NORMAL'\" status=\"success\" text=\"正常\"/>\n          <Badge v-else=\"\" status=\"error\" text=\"暂停\"/>\n        </template>\n        <template slot=\"type\" slot-scope=\"{ row }\">\n          <p v-if=\"row.cronExpression\">cron表达式:{{row.cronExpression}}</p>\n          <p v-else=\"\">调度时间:{{row.startDate}} ~ {{row.endDate}}</p>\n        </template>\n        <template slot=\"action\" slot-scope=\"{ row }\">\n          <a :disabled=\"hasAuthority('jobEdit')?false:true\" @click=\"handleModal(row)\">编辑</a>&nbsp;\n          <Dropdown v-show=\"hasAuthority('jobEdit')\" transfer ref=\"dropdown\" @on-click=\"handleClick($event,row)\">\n            <a href=\"javascript:void(0)\">\n              <span>更多</span>\n              <Icon type=\"ios-arrow-down\"></Icon>\n            </a>\n            <DropdownMenu slot=\"list\">\n              <DropdownItem v-if=\"row.jobStatus ==='NORMAL'?true:false\" name=\"pause\">暂停任务</DropdownItem>\n              <DropdownItem v-if=\"row.jobStatus ==='PAUSED'?true:false\" name=\"resume\">恢复任务</DropdownItem>\n              <DropdownItem name=\"remove\">删除任务</DropdownItem>\n            </DropdownMenu>\n          </Dropdown>\n        </template>\n      </Table>\n      <Page transfer :total=\"pageInfo.total\" :current=\"pageInfo.page\" :page-size=\"pageInfo.limit\" show-elevator\n            show-sizer\n            show-total\n            @on-change=\"handlePage\" @on-page-size-change='handlePageSize'></Page>\n    </Card>\n    <Modal v-model=\"modalVisible\"\n           :title=\"modalTitle\"\n           width=\"40\"\n           @on-cancel=\"handleReset\">\n      <div>\n        <Form ref=\"form1\" :model=\"formItem\" :rules=\"formItemRules\" :label-width=\"100\">\n          <FormItem label=\"任务名称\" prop=\"jobName\">\n            <Input :disabled=\"formItem.newData?false:true\" v-model=\"formItem.jobName\" placeholder=\"请输入内容\"></Input>\n          </FormItem>\n          <FormItem label=\"任务类型\" prop=\"jobType\">\n            <Select v-model=\"formItem.jobType\">\n              <Option value=\"cron\">cron任务(CronTrigger)</Option>\n              <Option value=\"simple\">简单任务(SimpleTrigger)</Option>\n            </Select>\n          </FormItem>\n          <FormItem v-if=\"formItem.jobType === 'simple'\" label=\"开始时间\" prop=\"startTime\">\n            <DatePicker v-model=\"formItem.startTime\" type=\"datetime\" placeholder=\"开始时间\"\n                        style=\"width: 100%\"></DatePicker>\n          </FormItem>\n          <FormItem v-if=\"formItem.jobType === 'simple'\" label=\"结束时间\" prop=\"endTime\">\n            <DatePicker v-model=\"formItem.endTime\" type=\"datetime\" placeholder=\"结束时间\" style=\"width: 100%\"></DatePicker>\n          </FormItem>\n          <FormItem v-if=\"formItem.jobType === 'simple'\" label=\"重复执行\" prop=\"repeatCount\">\n            <InputNumber :min=\"-1\" v-model=\"formItem.repeatCount\"></InputNumber> &nbsp;&nbsp;次\n            &nbsp;&nbsp;\n\n            <RadioGroup v-model=\"formItem.repeatCountType\" @on-change=\"repeatCountTypeChange\" type=\"button\">\n              <Radio label=\"0\">不重复执行</Radio>\n              <Radio label=\"-1\">不限制次数,一直重复执行(直到过期)</Radio>\n            </RadioGroup>\n          </FormItem>\n          <FormItem v-if=\"formItem.jobType === 'simple'\" label=\"重复执行间隔\" prop=\"repeatInterval\">\n            <InputNumber :min=\"1000\" v-model=\"formItem.repeatInterval\"></InputNumber>\n            <span>&nbsp;&nbsp;毫秒</span>\n          </FormItem>\n          <FormItem v-if=\"formItem.jobType === 'cron'\" label=\"cron表达式\" prop=\"cron\">\n            <Input v-model=\"formItem.cron\" placeholder=\"* * * * * ?\"></Input>\n          </FormItem>\n          <FormItem label=\"远程调度接口\" prop=\"path\">\n            <Select filterable v-model=\"formItem.path\" @on-change=\"handleOnSelectChange\">\n              <Option v-for=\"item in selectApis\" :value=\"item.path\">{{ item.path\n                }} - {{ item.apiName}} - {{ item.serviceId}}\n\n              </Option>\n            </Select>\n          </FormItem>\n          <FormItem label=\"任务描述\">\n            <Input v-model=\"formItem.jobDescription\" type=\"textarea\" placeholder=\"请输入内容\"></Input>\n          </FormItem>\n          <FormItem label=\"异常告警邮箱\" prop=\"alarmMail\">\n            <Input v-model=\"formItem.alarmMail\" placeholder=\"请输入内容\"></Input>\n          </FormItem>\n        </Form>\n        <div class=\"drawer-footer\">\n          <Button type=\"default\" @click=\"handleReset\">取消</Button>&nbsp;\n          <Button type=\"primary\" @click=\"handleSubmit\" :loading=\"saving\">保存</Button>\n        </div>\n      </div>\n    </Modal>\n  </div>\n</template>\n\n<script>\n  import {listConvertTree} from '@/libs/util'\n  //import {getAllApi} from '@/api/api'\n  export default {\n    name: 'TaskJob',\n    data () {\n      return {\n        loading: false,\n        modalVisible: false,\n        modalTitle: '',\n        saving: false,\n        pageInfo: {\n          total: 0,\n          page: 1,\n          limit: 10\n        },\n        selectApis: [],\n        formItemRules: {\n          jobName: [\n            {required: true, message: '任务名称不能为空', trigger: 'blur'}\n          ],\n          jobType: [\n            {required: true, message: '任务类型不能为空', trigger: 'blur'}\n          ],\n          cron: [\n            {required: true, message: 'cron表达式不能为空', trigger: 'blur'}\n          ],\n          path: [\n            {required: true, message: '调度接口不能为空', trigger: 'blur'}\n          ],\n          alarmMail: [\n            {required: false, type: 'email', message: '邮箱格式不正确', trigger: 'blur'}\n          ],\n          startTime: [\n            {required: true, message: '开始时间不能为空'}\n          ],\n          repeatInterval: [\n            {required: true, message: '间隔时间不能为空'}\n          ],\n          repeatCount: [\n            {required: true, message: '重试次数不能为空'}\n          ],\n        },\n        formItem: {\n          newData: true,\n          jobName: '',\n          jobDescription: '',\n          jobType: 'cron',\n          cron: '',\n          startTime: '',\n          endTime: '',\n          repeatInterval: 10000,\n          repeatCountType: '0',\n          repeatCount: 0,\n          serviceId: '',\n          path: '',\n          method: '',\n          contentType: '',\n          alarmMail: ''\n        },\n        columns: [\n          {\n            type: 'selection',\n            width: 60,\n            align: 'center'\n          },\n          {\n            title: '任务名称',\n            key: 'jobName',\n            width: 200,\n          },\n          {\n            title: '调度信息',\n            width: 350,\n            slot: 'type'\n          },\n          {\n            title: '状态',\n            key: 'jobStatus',\n            slot: 'status'\n          },\n          {\n            title: '任务描述',\n            key: 'jobDescription'\n          },\n          {\n            title: '操作',\n            key: '',\n            slot: 'action',\n            fixed: 'right',\n            width: 150\n          }\n        ],\n        data: []\n      }\n    },\n    methods: {\n      handleModal (data) {\n        if (data) {\n          this.modalTitle = '编辑任务 - ' + data.jobName\n          this.formItem = Object.assign({}, this.formItem, data)\n          this.formItem.jobType = this.formItem.jobTrigger === 'org.quartz.impl.triggers.SimpleTriggerImpl' ? 'simple' : 'cron'\n          this.formItem.cron = data.cronExpression\n          this.formItem.startTime = data.startDate\n          this.formItem.endTime = data.endDate\n          this.formItem.repeatInterval = data.repeatInterval ? parseInt(data.repeatInterval) : 0\n          this.formItem.repeatCountType = data.repeatCount + ''\n          this.formItem.path = data.data.path\n          this.formItem.serviceId = data.data.serviceId\n          this.formItem.method = data.data.method\n          this.formItem.contentType = data.data.contentType\n          this.formItem.alarmMail = data.data.alarmMail\n          this.formItem.newData = false\n        } else {\n          this.modalTitle = '添加任务'\n        }\n        this.modalVisible = true\n      },\n      handleTabClick(name){\n        this.current = name\n        this.handleModal();\n      },\n      handleReset () {\n        const newData = {\n          newData: true,\n          jobName: '',\n          jobDescription: '',\n          jobType: 'cron',\n          cron: '',\n          startTime: '',\n          endTime: '',\n          repeatInterval: 10000,\n          repeatCountType: '0',\n          repeatCount: 0,\n          serviceId: '',\n          path: '',\n          method: '',\n          contentType: '',\n          alarmMail: ''\n        }\n        this.formItem = newData\n        //重置验证\n        this.$refs['form1'].resetFields()\n        this.modalVisible = false\n        this.saving = false\n      },\n      handleSubmit () {\n        this.$refs['form1'].validate((valid) => {\n          if (valid) {\n            if (this.formItem.jobType === 'simple') {\n              this.formItem.startTime = this.formItem.startTime ? this.formItem.startTime.pattern('yyyy-MM-dd HH:mm:ss') : ''\n              this.formItem.endTime = this.formItem.endTime ? this.formItem.endTime.pattern('yyyy-MM-dd HH:mm:ss') : ''\n            }\n            this.saving = true\n            if (!this.formItem.newData) {\n              updateHttpJob(this.formItem).then(res => {\n                if (res.code === 0) {\n                  this.$Message.success('保存成功')\n                }\n                this.handleReset()\n                this.handleSearch()\n              }).finally(() => {\n                this.saving = false\n              })\n            } else {\n              addHttpJob(this.formItem).then(res => {\n                if (res.code === 0) {\n                  this.$Message.success('保存成功')\n                }\n                this.handleReset()\n                this.handleSearch()\n              }).finally(() => {\n                this.saving = false\n              })\n            }\n          }\n        })\n      },\n      handleRemove (data) {\n        this.$Modal.confirm({\n          title: '确定删除吗？',\n          onOk: () => {\n            removeJob(data.jobName).then(res => {\n              this.handleSearch()\n              if (res.code === 0) {\n                this.pageInfo.page = 1\n                this.$Message.success('删除成功')\n              }\n            })\n          }\n        })\n      },\n      handlePause (data) {\n        this.$Modal.confirm({\n          title: '确定暂停任务吗？',\n          onOk: () => {\n            pauseJob(data.jobName).then(res => {\n              this.handleSearch()\n              if (res.code === 0) {\n                this.pageInfo.page = 1\n                this.$Message.success('暂停成功')\n              }\n            })\n          }\n        })\n      },\n      handleResume (data) {\n        this.$Modal.confirm({\n          title: '确定恢复任务吗？',\n          onOk: () => {\n            resumeJob(data.jobName).then(res => {\n              this.handleSearch()\n              if (res.code === 0) {\n                this.pageInfo.page = 1\n                this.$Message.success('恢复成功')\n              }\n            })\n          }\n        })\n      },\n      handleSearch (page) {\n        if (page) {\n          this.pageInfo.page = page\n        }\n        this.loading = true\n        getJobs(this.pageInfo).then(res => {\n          this.data = res.data.records\n          this.pageInfo.total = parseInt(res.data.total)\n        }).finally(() => {\n          this.loading = false\n        })\n      },\n      handleLoadApiList() {\n        this.loading = true\n        \n      },\n      handlePage (current) {\n        this.pageInfo.page = current\n        this.handleSearch()\n      },\n      handlePageSize (size) {\n        this.pageInfo.limit = size\n        this.handleSearch()\n      },\n      handleOnSelectChange(value){\n        let api = {}\n        this.selectApis.some(item => {\n          if (item.path === value) {\n            api = item\n            return true\n          }\n        })\n        this.formItem.serviceId = api.serviceId\n        this.formItem.path = api.path\n        this.formItem.contentType = api.contentType\n        this.formItem.method = api.requestMethod\n      },\n      handleClick(name, row) {\n        switch (name) {\n          case 'pause':\n            this.handlePause(row)\n            break\n          case 'resume':\n            this.handleResume(row)\n            break\n          case 'remove':\n            this.handleRemove(row)\n            break\n        }\n      },\n      repeatCountTypeChange(value){\n        this.formItem.repeatCount = parseInt(value)\n      }\n    },\n    mounted: function () {\n      this.handleSearch()\n      this.handleLoadApiList()\n    }\n  }\n</script>\n"],"sourceRoot":"src/view/module/task/job"}]}